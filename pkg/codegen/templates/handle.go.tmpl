{{ define "handlers" }}
package handlr
// Code generated by gohandlr. DO NOT EDIT.

import (
	"context"
	"net/http"
	"fmt"
	"strconv"
	"github.com/epentland/gohandlr/pkg/gohandlr"
	"github.com/go-chi/chi/v5"
)

{{- range $Tag, $Endpoints := .Endpoints }}

{{- range $Endpoints }}
{{- if eq .State 0 }}
    {{ template "HandlerNoRequestNoResponse" . }}
{{ end }}
{{- if eq .State 1 }}
    {{ template "HandlerWithRequestNoResponse" . }}
{{- end }}
{{- if eq .State 2 }}
    {{ template "HandlerNoRequestWithResponse" . }}

{{- end }}
{{- if eq .State 3 }}
    {{ template "HandlerWithRequestWithResponse" . }}
{{- end }}
{{ end }}
{{ end }}
{{ end }}

{{ define "HandlerNoRequestNoResponse" }}
// Handle{{ .OperationID }} handles the {{ .Method }} request to {{ .Path }} with no request or response.
func Handle{{ .OperationID }}(process func(ctx context.Context) error, options ...gohandlr.Option) (string, string, http.HandlerFunc) {
    return "{{ .Method | ToUpper }}", "{{ .Path }}", gohandlr.HandlerNoRequestNoResponse(process, options...)
}
{{ end }}

{{ define "HandlerWithRequestNoResponse" }}
// Handle{{ .OperationID }} handles the {{ .Method }} request to {{ .Path }} with a request no response.
func Handle{{ .OperationID }}(process func(ctx context.Context, req {{ .OperationID }}Input) error, options ...gohandlr.Option) (string, string, http.HandlerFunc) {
    return "{{ .Method | ToUpper }}", "{{ .Path }}", gohandlr.HandlerWithRequestNoResponse(process, options...)
}
{{ end }}

{{ define "HandlerNoRequestWithResponse" }}
// Handle{{ .OperationID }} handles the {{ .Method }} request to {{ .Path }} with a response no request.
func Handle{{ .OperationID }}(process func(ctx context.Context) ({{ .Response.Name }}, error), options ...gohandlr.Option) (string, string, http.HandlerFunc) {
    return "{{ .Method | ToUpper }}", "{{ .Path }}", gohandlr.HandlerNoRequestWithResponse(process, options...)
}
{{ end }}

{{ define "HandlerWithRequestWithResponse" }}
// Handle{{ .OperationID }} handles the {{ .Method }} request to {{ .Path }} with a request and response.
func Handle{{ .OperationID }}(process func(ctx context.Context, req {{ .OperationID }}Input) ({{ .Response.Name }}, error), options ...gohandlr.Option) (string, string, http.HandlerFunc) {
	{{ template "ParamReader" . }}
    return "{{ .Method | ToUpper }}", "{{ .Path }}", gohandlr.HandlerWithRequestWithResponse(process, options...)
	}
{{- end }}

{{ define "ParamReader" }}
paramReader := gohandlr.WithParamsReader(func(r *http.Request, v interface{}) error {
		req, ok := v.(*{{ .OperationID }}Input)
		if !ok {
			return fmt.Errorf("invalid type")
		}

		{{ template "params" .}}

		return nil
	})
	options = append([]gohandlr.Option{paramReader}, options...)
{{ end }}


{{ define "params" }}
	{{- range .Params }}
		{{ if eq .Tag "path"}}
			{{ .Name | ToCamel }} := chi.URLParam(r, ("{{ .Name }}"))
			{{ template "Param" . }}
		{{ else if eq .Tag "query"}}
			{{ .Name | ToCamel }} := r.URL.Query().Get("{{ .Name }}")
			{{ template "Param" . }}
		{{ else if eq .Tag "header"}}
			{{ .Name | ToCamel }} := r.Header.Get("{{ .Name }}")
			{{ template "Param" . }}
		{{ end }}
	{{- end }}
{{ end }}

{{ define "Param"}}
	{{- if eq .Type "int" }}
		{{ template "ParamToInt" . }}
	{{- else if eq .Type "string" }}
		{{ template "ParamToString" . }}
	{{- end }}
{{ end }}

{{ define "ParamToInt" }}
	{{ .Name | ToCamel }}Int, err := strconv.Atoi({{ .Name | ToCamel }})
	if err != nil {
		return err
	}
	req.{{ .Name | ToCamel }} = {{ .Name | ToCamel }}Int
{{ end }}

{{ define "ParamToString" }}
	req.{{ .Name | ToCamel }} = {{ .Name | ToCamel }}
{{ end }}